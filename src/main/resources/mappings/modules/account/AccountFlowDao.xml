<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mall.modules.account.dao.AccountFlowDao">
    
	<sql id="accountFlowColumns">
		a.id AS "id",
		a.flow_no AS "flowNo",
		a.user_id AS "userId",
		a.amount AS "amount",
		a.type AS "type",
		a.mode AS "mode",
		a.order_id AS "orderId",
		a.create_date AS "createDate",
		a.income_expenditure_mode AS "incomeExpenditureMode",
		a.bank_account AS "bankAccount",
		a.bank_account_name AS "bankAccountName",
		a.bank_name AS "bankName",
		a.check_status AS "checkStatus",
		m.nickname as "nickname"
	</sql>
	
	<sql id="accountFlowJoins">
		left join member_info m on m.id = a.user_id
	</sql>
    
	<select id="get" resultType="AccountFlow">
		SELECT 
			<include refid="accountFlowColumns"/>
		FROM account_flow a
		<include refid="accountFlowJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="getByFlowNo" resultType="AccountFlow">
		SELECT
			<include refid="accountFlowColumns"/>
		FROM account_flow a
		<include refid="accountFlowJoins"/>
		WHERE a.flow_no = #{flowNo}
	</select>
	
	<select id="findList" resultType="AccountFlow">
		SELECT 
			<include refid="accountFlowColumns"/>
		FROM account_flow a
		<include refid="accountFlowJoins"/>
		<where>
			<if test="nickname != null and nickname != ''">
				 m.nickname  like CONCAT('%',#{nickname},'%')
			</if>
			<if test="org != null and org != ''">
				and a.mode in ('1','3') and a.income_expenditure_mode = '2'
			</if>
			<if test="checkStatus != null and checkStatus != ''">
				and a.check_status = #{checkStatus}
			</if>
			<if test="mode != null and mode != ''">
				and a.mode = #{mode}
			</if>
			<if test="type != null and type != ''">
				and a.type = #{type}
			</if>
			<if test="userId != null and userId != ''">
				and a.user_id = #{userId}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_date desc
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="AccountFlow">
		SELECT 
			<include refid="accountFlowColumns"/>
		FROM account_flow a
		<include refid="accountFlowJoins"/>
		<where>
			
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>

	<select id="stsFlow" resultType="java.util.Map">
		select
			   ifnull(sum(case WHEN a.type =1 THEN amount end ),0)	 as "income",
			   ifnull(sum(case WHEN a.type =2 THEN amount end ),0) as "expenditure"
		from account_flow a
		where  user_id = #{userId}
	</select>
	
	<insert id="insert">
		INSERT INTO account_flow(
			id,
			flow_no,
			user_id,
			amount,
			type,
			mode,
			order_id,
			create_date,
			income_expenditure_mode,
			bank_account,
			bank_account_name,
			bank_name,
			check_status
		) VALUES (
			#{id},
			#{flowNo},
			#{userId},
			#{amount},
			#{type},
			#{mode},
			#{orderId},
			#{createDate},
			#{incomeExpenditureMode},
			#{bankAccount},
			#{bankAccountName},
			#{bankName},
			#{checkStatus}
		)
	</insert>
	
	<update id="update">
		UPDATE account_flow SET 	
			flow_no = #{flowNo},
			user_id = #{userId},
			amount = #{amount},
			type = #{type},
			mode = #{mode},
			order_id = #{orderId},
			income_expenditure_mode = #{incomeExpenditureMode},
			bank_account = #{bankAccount},
			bank_account_name = #{bankAccountName},
			bank_name = #{bankName},
			check_status = #{checkStatus}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		DELETE FROM account_flow
		WHERE id = #{id}
	</update>

	<update id="editAccount" parameterType="java.util.Map">
		update member_info
		<set>
			<if test="balance != null">
				balance = #{balance},
			</if>
			<if test="commission != null">
				commission = #{commission},
			</if>
		</set>
		<where>
			id = #{userId}
		</where>
	</update>
	
</mapper>